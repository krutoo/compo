{"version":3,"sources":["../src/pack.js","../src/utils.js","../src/createVirtualNode.js","../src/defineComponent.js","../src/convert.js","../src/html.js","../src/dom.js","../src/updateElement.js","../src/component.js","../src/index.js","js/components/note.js","js/components/field.js","js/components/filters.js","js/components/app.js","js/index.js"],"names":["anchorsRegex","pack","strings","parts","valuesMap","valuesMapLength","index","length","push","anchor","template","join","trim","replace","values","replaceAnchors","string","replacer","String","hasAnchors","value","Boolean","match","functionTags","Object","freeze","isFunction","includes","getTag","isBoolean","isPrimitive","prototype","toString","call","slice","insert","target","part","position","withReplace","readyPosition","Number","result","Array","isArray","concat","TAG_NAME","createVirtualNode","type","props","children","Symbol","toStringTag","isVirtualNode","registry","Map","defineComponent","name","creator","readyName","toUpperCase","error","has","Error","TypeError","set","templates","getTemplate","html","cacheKey","get","prepareAnchors","createTemplate","$node","HTMLElement","childNodes","from","forEach","$child","Node","nodeValue","templateString","$template","makeCommentHTML","parentNode","insertBefore","remove","content","readyHTML","document","createElement","insertAdjacentHTML","convertToVirtualNode","virtualNode","getVirtualType","nodeName","childIndex","isFirstChild","isLastChild","attributes","attribute","typeName","cloneVirtualNode","clone","clonedChildren","passValues","propName","propValue","child","childrenPart","partIndex","listItem","splice","virtualNodes","key","firstElementChild","createNode","$parent","instantiate","instance","component","bound","previousVNode","render","setProps","realIndex","virtualChild","appendChild","isDisplayedPrimitive","createTextNode","createComment","Component","undefined","$target","setProp","setAttribute","removeProp","removeAttribute","updateElement","newNode","oldNode","$children","createRealNode","replaceChild","removeChild","HTMLTextAreaElement","isSameVirtualNodes","updateProps","updateChildren","newProps","oldProps","updateProp","newValue","oldValue","newChildren","oldChildren","maxLength","Math","max","first","second","every","state","parent","newState","updateComponentElement","currentVNode","isComponent","isComponentClass","innerHTML","noteText","isCompleted","onRemove","onCheck","textClasses","formattedText","split","map","placeholder","onInput","filters","selectFilter","currentFilter","filter","isActive","FILTERS","check","note","checked","DEFAULT_NOTES","id","text","notes","title","currentText","currentFilterName","addNote","bind","typeNote","checkNote","removeNote","setState","noteId","targetNote","find","filterName","hasText","newNote","Date","now","needShowNote","addEventListener","getElementById"],"mappings":"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","file":"js.07a4bdaf.js","sourceRoot":"../example","sourcesContent":["/**\n * @typedef {Object} Pack Packed element.\n * @property {string} template HTML template with passed values replaced by anchors.\n * @property {Object} values values for anchors in template.\n */\n\n/**\n * Regex for search anchors in markup.\n * @type {string}\n */\nconst anchorsRegex = /{%\\d*%}/g;\n\n/**\n * Tag for template literals. Returns the packed element.\n * @param {Array} strings String part of template literal.\n * @param {...*} values Values part.\n * @return {Pack} Packed element.\n */\nexport default function pack (strings, ...values) {\n  const parts = [];\n  const valuesMap = {};\n  let valuesMapLength = 0;\n\n  for (let index = 0; index < strings.length; index++) {\n    parts.push(strings[index]);\n    if (index < values.length) {\n      const anchor = `{%${valuesMapLength}%}`;\n      valuesMapLength += 1;\n      valuesMap[anchor] = values[index];\n      parts.push(anchor);\n    }\n  }\n\n  return {\n    template: parts.join('').trim().replace(/\\s+/g, ' '),\n    values: valuesMap,\n  };\n}\n\n/**\n * Replaces all anchors by replacer.\n * @param {string} string String to replace anchors.\n * @param {(string|Function)} replacer Replacer.\n * @return {string} String with replaced anchors.\n */\nexport function replaceAnchors (string, replacer) {\n  return String(string).replace(anchorsRegex, replacer);\n}\n\n/**\n * Check that string contains anchors (e.g. '{%2%}').\n * @param {string} value String to check it.\n * @return {boolean} True if string contains anchors.\n */\nexport function hasAnchors (value) {\n  // do not use anchorsRegex.test here (because with global search it save lastIndex)\n  return Boolean(String(value).match(anchorsRegex));\n}\n","/**\n * Functions class names.\n * @type {Array<string>}\n */\nconst functionTags = Object.freeze([\n  'Function',\n  'AsyncFunction',\n  'GeneratorFunction',\n  'Proxy',\n]);\n\n/**\n * Check that value is a function.\n * @param {*} value Value.\n * @return {boolean} Is it a function?\n */\nexport function isFunction (value) {\n  return functionTags.includes(getTag(value));\n}\n\n/**\n * Check that value is boolean.\n * @param {*} value Value.\n * @return {boolean} Is it boolean?\n */\nexport function isBoolean (value) {\n  return getTag(value) === 'Boolean';\n}\n\n/**\n * Check that value is primitive.\n * @param {*} value Value to determine is it primitive.\n * @return {boolean} Is it primitive?\n */\nexport function isPrimitive (value) {\n  return value !== Object(value);\n}\n\n/**\n * Return a tag of input value.\n * @param  {*} value Value to define it class.\n * @return {string} Name of class.\n */\nexport function getTag (value) {\n  return Object.prototype.toString.call(value).slice(8, -1);\n}\n\n/**\n * Returns a new array from two input.\n * @param {Array} target Target array to insert part.\n * @param {Array} part Part array.\n * @param {number} [position=0] Position to insertion.\n * @param {boolean} [withReplace=false] Need replace item in insert position?\n * @return {Array} New array.\n */\nexport function insert (target = [], part = [], position = 0, withReplace = false) {\n  const readyPosition = Number(position) || 0;\n  let result = [];\n\n  if (Array.isArray(target) && Array.isArray(part)) {\n    result = target.slice(0, readyPosition).concat(\n      part,\n      target.slice(readyPosition + (withReplace ? 1 : 0)),\n    );\n  }\n\n  return result;\n}\n","import { getTag, isFunction } from './utils.js';\n\n/**\n * @typedef {Object} VirtualNode Virtual DOM node.\n * @property {(string|Function)} type String (e.g. 'div', 'span') or function that returns virtual node.\n * @property {Object} props Properties.\n * @property {Array} children Children.\n * @property {(Component|null)} component Owner component, null by default.\n */\n\n/**\n * Tag of virtual DOM nodes.\n * @type {string}\n */\nexport const TAG_NAME = 'Packmar.VirtualNode';\n\n/**\n * Returns a new virtual DOM node.\n * @param {(string|Function)} type Type.\n * @param {Object} [props] Properties.\n * @param  {Array} children Children.\n * @return {VirtualNode} New virtual DOM node.\n */\nexport default function createVirtualNode (type, props, ...children) {\n  return {\n    [Symbol.toStringTag]: TAG_NAME,\n    type: isFunction(type) ? type : String(type),\n    props: props ? props : {},\n    children,\n    component: null,\n  };\n}\n\n/**\n * Check that value is a virtual node.\n * @param {*} value Checked value.\n * @return {boolean} Is it a virtual node?\n */\nexport function isVirtualNode (value) {\n  return getTag(value) === TAG_NAME;\n}\n","import { isFunction } from './utils.js';\nimport createVirtualNode from './createVirtualNode.js';\n\n/**\n * Component types registry.\n * @type {Map}\n */\nexport const registry = new Map();\n\n/**\n * Defines component creator function or class for use in html().\n * @param {string} name Name of component to use.\n * @param {Function} creator Component creator function or class.\n * @return {Function} Function that returns virtual node.\n */\nexport default function defineComponent (name, creator) {\n  const readyName = String(name).toUpperCase();\n  let error = null;\n\n  if (!readyName.includes('-')) {\n    error = Error('Component name must contain \"-\" character');\n  } else if (!isFunction(creator)) {\n    error = TypeError(`Component \"${name}\" must be a function`);\n  } else if (registry.has(readyName)) {\n    error = Error(`Component \"${name}\" already defined`);\n  }\n\n  if (error) {\n    throw error;\n  } else {\n    registry.set(readyName, creator);\n    return props => createVirtualNode(creator, props);\n  }\n}\n","import { insert } from './utils.js';\nimport { registry } from './defineComponent.js';\nimport { hasAnchors, replaceAnchors } from './pack.js';\nimport createVirtualNode, { isVirtualNode } from './createVirtualNode.js';\n\n/**\n * Cache of created DOM elements. Map keys is html markup.\n * @type {Map}\n */\nconst templates = new Map();\n\n/**\n * Returns a template by html string. Caches the result.\n * @param {string} html HTML markup.\n * @return {HTMLDivElement} Template with content created from html string.\n */\nexport function getTemplate (html) {\n  const cacheKey = String(html).trim();\n  let template;\n\n  if (templates.has(cacheKey)) {\n    template = templates.get(cacheKey);\n  } else {\n    // @todo maybe need prepare anchors in virtual nodes (for speed up)...\n    template = prepareAnchors(createTemplate(cacheKey));\n    templates.set(cacheKey, template);\n  }\n\n  return template;\n}\n\n/**\n * Replaces anchors (e.g. '{%0%}') by anchor-comments (e.g. '<!--{%0%}-->') in text content.\n * @param {Node} $node Element or node.\n * @return {Node} Mutated input node.\n */\nexport function prepareAnchors ($node) {\n  if ($node instanceof HTMLElement) {\n    if ($node.childNodes.length > 0) {\n      Array.from($node.childNodes).forEach($child => prepareAnchors($child));\n    }\n  } else if ($node instanceof Node && hasAnchors($node.nodeValue)) {\n    const templateString = replaceAnchors($node.nodeValue, makeCommentHTML);\n    const $template = createTemplate(templateString);\n    if ($node.parentNode) {\n      // need make array here, because insertBefore mutates \"childNodes\"\n      // @todo refactor with for loop (with update index before insertBefore() call)\n      for (const $child of [...$template.childNodes]) {\n        $node.parentNode.insertBefore($child, $node);\n      }\n      $node.remove();\n    }\n  }\n  return $node;\n}\n\n/**\n * Returns comment HTML string.\n * @param {string} content Comment text.\n * @return {string} Comment HTML markup string.\n */\nexport function makeCommentHTML (content) {\n  return `<!--${content}-->`;\n}\n\n/**\n * Returns a new HTMLDivElement with content, created from input html markup.\n * @param {string} html HTML markup.\n * @return {HTMLDivElement} Template.\n */\nexport function createTemplate (html) {\n  const readyHTML = String(html || '').trim().replace(/\\s+/g, ' ');\n  const template = document.createElement('div');\n\n  template.insertAdjacentHTML('afterBegin', readyHTML);\n\n  return template;\n}\n\n/**\n * Returns a new virtual DOM node from input real DOM node.\n * @param {Node} $node Real DOM node.\n * @return {VirtualNode} Virtual DOM node.\n */\nexport function convertToVirtualNode ($node) {\n  let result = '';\n\n  if ($node instanceof HTMLElement) {\n    const virtualNode = createVirtualNode(getVirtualType($node.nodeName));\n    if ($node.childNodes.length > 0) {\n      for (let childIndex = 0; childIndex < $node.childNodes.length; childIndex++) {\n        const $child = $node.childNodes[childIndex];\n\n        if ($child instanceof HTMLElement) {\n          virtualNode.children.push(convertToVirtualNode($child));\n        } else if ($child instanceof Node) {\n          // prevent pass of first or last whitespace-only child\n          const isFirstChild = childIndex === 0;\n          const isLastChild = childIndex === $node.childNodes.length - 1;\n          const isEmptyChild = !$child.nodeValue.trim();\n\n          if (!isEmptyChild || isFirstChild || isLastChild) {\n            virtualNode.children.push($child.nodeValue);\n          }\n        }\n      }\n    }\n    if ($node.attributes.length > 0) {\n      for (const attribute of $node.attributes) {\n        const { name, value } = attribute;\n\n        // for defined boolean attributes need to save true\n        virtualNode.props[name] = value === '' ? true : value;\n      }\n    }\n    result = virtualNode;\n  } else if ($node instanceof Node) {\n    result = $node.nodeValue;\n  }\n\n  return result;\n}\n\n/**\n * Returns a virtual DOM node type (defined components classes or functions).\n * @param {string} typeName Type name.\n * @return {(string|Function)} Virtual DOM node type.\n */\nexport function getVirtualType (typeName) {\n  let result = typeName;\n\n  if (registry.has(typeName)) {\n    result = registry.get(typeName);\n  }\n\n  return result;\n}\n\n/**\n * Returns a simple copy of virtual node. Don't clone props deeply.\n * @param {VirtualNode} virtualNode Virtual DOM node.\n * @return {VirtualNode} New Virtual DOM node.\n */\nexport function cloneVirtualNode (virtualNode) {\n  let clone = virtualNode;\n\n  if (isVirtualNode(virtualNode)) {\n    const { type, props, children } = virtualNode;\n    const clonedChildren = [];\n\n    for (let index = 0; index < children.length; index++) {\n      clonedChildren.push(cloneVirtualNode(children[index]));\n    }\n\n    clone = createVirtualNode(type, { ...props }, ...clonedChildren);\n  }\n\n  return clone;\n}\n\n/**\n * Replaces anchors by values in virtual DOM node (mutates node).\n * @param {VirtualNode} virtualNode Virtual DOM node.\n * @param {Object} values Values.\n * @return {VirtualNode} Mutated input virtual DOM node.\n */\nexport function passValues (virtualNode, values) {\n  if (isVirtualNode(virtualNode) && values) {\n    const { props } = virtualNode;\n    let { children } = virtualNode;\n\n    for (const propName in props) {\n      const propValue = props[propName];\n      if (hasAnchors(propValue)) {\n        props[propName] = values[propValue];\n      }\n    }\n\n    for (let index = 0; index < children.length; index++) {\n      // @todo maybe create new array and push() faster than splice()\n      const child = children[index];\n\n      if (isVirtualNode(child)) {\n        passValues(child, values);\n      } else if (hasAnchors(child)) {\n        const value = values[child.trim()];\n\n        if (Array.isArray(value)) {\n          const childrenPart = [];\n\n          for (let partIndex = 0; partIndex < value.length; partIndex++) {\n            const listItem = value[partIndex];\n            if (listItem) { // @todo isDisplayedPrimitive(value)\n              childrenPart.push(passValues(listItem, values));\n            }\n          }\n\n          children = insert(children, childrenPart, index, true);\n          index += childrenPart.length;\n        } else if (value) { // @todo isDisplayedPrimitive(value)\n          children.splice(index, 1, value);\n        } else {\n          children.splice(index, 1);\n          index--;\n        }\n      }\n    }\n    virtualNode.children = children;\n  }\n\n  return virtualNode;\n}\n","import pack from './pack.js';\nimport {\n  passValues,\n  getTemplate,\n  cloneVirtualNode,\n  convertToVirtualNode,\n} from './convert.js';\n\n/**\n * Cache of virtual DOM nodes. Map keys is html markup.\n * @type {Map}\n */\nconst virtualNodes = new Map();\n\n/**\n * Template literal tag. Returns a virtual DOM node by html string.\n * @param {Array} strings String part of template literal.\n * @param {...*} values Values part.\n * @return {VirtualNode} Virtual DOM node.\n */\nexport default function html (...args) {\n  const { template: key, values } = pack(...args);\n  let virtualNode;\n\n  if (virtualNodes.has(key)) {\n    virtualNode = virtualNodes.get(key);\n  } else {\n    virtualNode = convertToVirtualNode(getTemplate(key).firstElementChild);\n    virtualNodes.set(key, virtualNode);\n  }\n\n  return passValues(cloneVirtualNode(virtualNode), values);\n}\n","import { isVirtualNode } from './createVirtualNode.js';\nimport Component, { isComponentClass } from './component.js';\nimport { isFunction, isPrimitive, isBoolean } from './utils.js';\n\n/**\n * Creates a real DOM node.\n * @param {*} virtualNode Virtual DOM node.\n * @param {HTMLElement} $parent Parent element to save in component.\n * @param {number} index Position in parent to save in component.\n * @return {Node} Real DOM node.\n */\nexport function createNode (virtualNode, $parent, index = 0) {\n  let $node;\n\n  if (isVirtualNode(virtualNode)) {\n    const { type, props, children } = virtualNode;\n\n    if (isFunction(type)) {\n      // @todo need refactoring here\n      const { component: instance } = instantiate(virtualNode);\n\n      instance.bound($parent, index);\n\n      instance.previousVNode = instance.render(props);\n      $node = createNode(instance.previousVNode, $parent, index);\n    } else {\n      $node = document.createElement(type);\n\n      setProps($node, virtualNode);\n\n      for (let childIndex = 0, realIndex = 0; childIndex < children.length; childIndex++) {\n        const virtualChild = children[childIndex];\n        if (virtualChild) {\n          $node.appendChild(createNode(virtualChild, $node, realIndex));\n          realIndex++;\n        }\n      }\n    }\n  } else if (isDisplayedPrimitive(virtualNode)) {\n    // String() needs here to prevent Uncaught TypeError with symbol type values\n    $node = document.createTextNode(String(virtualNode));\n  } else {\n    $node = document.createComment('empty');\n  }\n\n  return $node;\n}\n\n/**\n * Adds \"component\" prop to virtual DOM node with custom type.\n * @param {VirtualNode} virtualNode Virtual DOM node to add instance.\n * @return {VirtualNode} Mutated input virtual DOM node with instance.\n */\nexport function instantiate (virtualNode) {\n  if (isVirtualNode(virtualNode)) {\n    const { type, props } = virtualNode;\n    let instance;\n    if (isComponentClass(type)) {\n      instance = new type(props);\n    } else if (isFunction(type)) {\n      instance = new Component(props);\n      instance.render = type;\n    }\n    if (instance) {\n      virtualNode.component = instance;\n    }\n  }\n\n  return virtualNode;\n}\n\n/**\n * Check that value is a displayed primitive (should be visible in markup).\n * @param {*} value Checked value.\n * @return {boolean} Is it a displayed primitive?\n */\nexport function isDisplayedPrimitive (value) {\n  return isPrimitive(value)\n    && value !== null\n    && value !== false\n    && value !== undefined;\n}\n\n/**\n * Set properties to real DOM element by virtual DOM node.\n * @param {HTMLElement} $target Target element.\n * @param {VirtualNode} virtualNode Virtual DOM node.\n */\nexport function setProps ($target, virtualNode) {\n  if (isVirtualNode(virtualNode)) {\n    const { props } = virtualNode;\n    for (const name in props) {\n      const value = props[name];\n      setProp($target, name, value);\n    }\n  }\n}\n\n/**\n * Set a property to real DOM element by name and value.\n * @param {HTMLElement} $target Target element.\n * @param {string} name Property name.\n * @param {*} value Property value.\n */\nexport function setProp ($target, name, value) {\n  if ($target instanceof HTMLElement) {\n    if (isFunction(value)) {\n      $target[name] = value;\n    } else if (isBoolean(value)) {\n      if (value) {\n        $target.setAttribute(name, '');\n        $target[name] = true;\n      } else {\n        removeProp($target, name, value);\n        $target[name] = false;\n      }\n    } else {\n      $target.setAttribute(name, value);\n      $target[name] = value;\n    }\n  }\n}\n\n/**\n * Removes property of real DOM element by name.\n * @param {HTMLElement} $target Target element.\n * @param {string} propName Name of property.\n * @param {*} value Removed value.\n */\nexport function removeProp ($target, propName, value) {\n  if ($target instanceof HTMLElement) {\n    if (isFunction(value)) {\n      $target[propName] = null;\n    } else {\n      $target.removeAttribute(propName);\n    }\n  }\n}\n","import { isPrimitive } from './utils.js';\nimport { isComponent } from './component.js';\nimport { isVirtualNode } from './createVirtualNode.js';\nimport { createNode, setProp, removeProp } from './dom.js';\n\n/**\n * Updates a real DOM element according to old and new versions of it virtual copy.\n * @param {HTMLElement} $parent Parent DOM element.\n * @param {VirtualNode} newNode New version of virtual DOM node.\n * @param {VirtualNode} [oldNode] Old version of virtual DOM node.\n * @param {number} [$children] List of $parent children.\n * @param {number} [index=0] Index of target node in parent list of child nodes.\n */\nexport default function updateElement (\n  $parent,\n  newNode,\n  oldNode,\n  $children,\n  index = 0,\n) {\n  if ($parent instanceof HTMLElement) {\n    /** @inheritDoc */\n    const createRealNode = () => createNode(\n      newNode,\n      $parent,\n      index,\n    );\n    const $target = $children\n      ? $children[index]\n      : $parent.childNodes[index];\n\n    if (!oldNode && newNode) {\n      if ($target) { // update real dom for non actual virtual dom version\n        $parent.replaceChild(createRealNode(), $target);\n      } else {\n        $parent.appendChild(createRealNode());\n      }\n    } else if (!newNode && oldNode) {\n      if ($target) {\n        $parent.removeChild($target);\n\n        // also for <textarea> need to remove value\n        if ($parent instanceof HTMLTextAreaElement) {\n          $parent.value = '';\n        }\n      }\n    } else if (!isSameVirtualNodes(newNode, oldNode)) {\n      if ($target) {\n        $parent.replaceChild(createRealNode(), $target);\n      } else { // update real dom for non actual virtual dom version\n        $parent.appendChild(createRealNode());\n      }\n    } else if (isVirtualNode(newNode)) {\n      if (!$target) { // update real dom for non actual virtual dom version\n        $parent.appendChild(createRealNode());\n      } else {\n        if (isComponent(oldNode.component)) {\n          // move component link into new virtual node version and update props\n          newNode.component = oldNode.component;\n          newNode.component.setProps(newNode.props);\n        } else {\n          updateProps($target, newNode.props, oldNode.props);\n          updateChildren($target, newNode.children, oldNode.children);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Updates changed properties of real DOM element by old and new versions of virtual node props.\n * @param {HTMLElement} $target Target element.\n * @param {Object} newProps Old properties.\n * @param {Object} oldProps New properties.\n */\nexport function updateProps ($target, newProps = {}, oldProps = {}) {\n  if ($target instanceof HTMLElement && newProps && oldProps) {\n    const props = { ...oldProps, ...newProps };\n\n    for (const propName in props) {\n      const newValue = newProps[propName];\n      const oldValue = oldProps[propName];\n\n      updateProp($target, propName, newValue, oldValue);\n    }\n  }\n}\n\n/**\n * Updates changed property of real DOM element by old and new versions.\n * @param {HTMLElement} $target Target element.\n * @param {string} propName Name of property.\n * @param {*} newValue New property version.\n * @param {*} oldValue Old property version.\n */\nexport function updateProp ($target, propName, newValue, oldValue) {\n  if (!oldValue || newValue !== oldValue) {\n    setProp($target, propName, newValue);\n  } else if (!newValue && oldValue) {\n    removeProp($target, propName, oldValue);\n  }\n}\n\n/**\n* Updates children of real DOM element by new and old versions of virtual node children.\n* @param {HTMLElement} $parent Parent element.\n* @param {Array} newChildren New version of virtual DOM node children.\n* @param {Array} oldChildren Old version of virtual DOM node children.\n*/\nexport function updateChildren ($parent, newChildren, oldChildren) {\n  if (\n    $parent instanceof HTMLElement\n    && Array.isArray(newChildren)\n    && Array.isArray(oldChildren)\n  ) {\n    const maxLength = Math.max(newChildren.length, oldChildren.length);\n\n    if (maxLength > 0) {\n      // need create array here, because operations with $parent mutates \"childNodes\"\n      const $children = [...$parent.childNodes];\n\n      for (let childIndex = 0; childIndex < maxLength; childIndex++) {\n        updateElement(\n          $parent,\n          newChildren[childIndex],\n          oldChildren[childIndex],\n          $children,\n          childIndex,\n        );\n      }\n    }\n  }\n}\n\n/**\n * Check that both arguments is same virtual nodes or primitives.\n * @param {*} first First checked value.\n * @param {*} second Second checked value.\n * @return {boolean} Are they the same virtual nodes?\n */\nexport function isSameVirtualNodes (first, second) {\n  const values = [first, second];\n\n  return (values.every(isVirtualNode) && first.type === second.type)\n  || (values.every(isPrimitive) && String(first) === String(second));\n}\n","import { getTag } from './utils.js';\nimport updateElement from './updateElement.js';\n\n/**\n * Component tag name.\n * @type {string}\n */\nexport const TAG_NAME = 'Packmar.Component';\n\n/**\n * Base component class.\n */\nexport default class Component {\n  /**\n   * Creates a components.\n   * @param {Object} props Properties.\n   */\n  constructor (props = {}) {\n    this.state = {};\n    this.props = props ? props : {};\n  }\n\n  /** @inheritDoc */\n  get [Symbol.toStringTag] () {\n    return TAG_NAME;\n  }\n\n  /**\n   * Should returns a virtual node.\n   * @abstract\n   */\n  render () {\n    throw new Error('Component class created without \"render\" method');\n  }\n\n  /**\n   * Saves parent element reference with index in child nodes to render.\n   * @param {HTMLElement} parent Parent HTML element.\n   * @param {number} index Index in parent child nodes list.\n   */\n  bound (parent, index = 0) {\n    if (parent instanceof HTMLElement) {\n      this.parent = parent;\n      this.index = index;\n    }\n  }\n\n  /**\n   * Updates state.\n   * @param {Object} newState New state part.\n   */\n  setState (newState = {}) {\n    this.state = { ...this.state, ...newState };\n    updateComponentElement.call(this);\n  }\n\n  /**\n   * Updates props.\n   * @param {Object} newProps New props part.\n   */\n  setProps (newProps) {\n    this.props = { ...this.props, ...newProps };\n    updateComponentElement.call(this);\n  }\n}\n\n/**\n * Update element of component.\n */\nexport function updateComponentElement () {\n  const previousVNode = this.previousVNode;\n  const currentVNode = this.render(this.props, this.state);\n\n  updateElement(\n    this.parent,\n    currentVNode,\n    previousVNode,\n    null,\n    this.index,\n  );\n\n  this.previousVNode = currentVNode;\n}\n\n/**\n * Check that value is a component.\n * @param {*} value Checked value.\n * @return {boolean} Is it component?\n */\nexport function isComponent (value) {\n  return getTag(value) === TAG_NAME;\n}\n\n/**\n * Check that value is a component class.\n * @param {*} value Checked value.\n * @return {boolean} Is it component class?\n */\nexport function isComponentClass (value) {\n  return value\n    && value.prototype\n    && value.prototype instanceof Component;\n}\n","import html from './html.js';\nimport Component from './component.js';\nimport updateElement from './updateElement.js';\nimport defineComponent from './defineComponent.js';\nimport createVirtualNode from './createVirtualNode.js';\n\n/**\n * Renders a virtual node into DOM element.\n * @param {VirtualNode} virtualNode Virtual DOM node.\n * @param {HTMLElement} parent Parent HTML element.\n */\nfunction render (virtualNode, parent) {\n  if (parent instanceof HTMLElement) {\n    parent.innerHTML = '';\n    updateElement(parent, virtualNode);\n  }\n}\n\nexport {\n  html,\n  render,\n  Component,\n  defineComponent as define,\n  createVirtualNode,\n};\n","import { html, define } from 'packmar';\n\nexport default define('todo-note', function Note ({ noteText, isCompleted, onRemove, onCheck }) {\n  const textClasses = `text ${isCompleted ? 'text-decoration--line-through' : ''}`;\n  const formattedText = html`\n    <div class=\"formatted\">\n      ${noteText.split('\\n').map(part => html`<span>${part}<br /></span>`)}\n    </div>\n  `;\n  return html`\n    <div class=\"note overflow--hidden\">\n      <button class=\"button check-button overflow--hidden\" onclick=\"${onCheck}\">\n        ${isCompleted ? '✔️' : ''}\n      </button>\n      <div class=${textClasses}>\n        ${formattedText}\n      </div>\n      <button class=\"button remove-button overflow--hidden\" onclick=${onRemove}>\n        ❌\n      </button>\n    </div>\n  `;\n});\n","import { html, define } from 'packmar';\n\nexport default define('todo-field', function Field ({ value, placeholder, onInput }) {\n  return html`\n    <textarea\n      rows=\"5\"\n      class=\"main-field display--block width--100percent\"\n      placeholder=${placeholder}\n      oninput=${onInput}\n    >${value}</textarea>\n  `;\n});\n","import { html, define } from 'packmar';\n\nexport default define('todo-filters', function Filters ({ filters, selectFilter, currentFilter }) {\n  return html`\n    <div class=\"filters display--flex\">\n      ${filters.map(filter => {\n        const isActive = filter.name === currentFilter.name;\n        return html`\n          <button\n            class=${`filter-button ${isActive ? 'active' : ''}`}\n            onclick=${() => selectFilter(filter.name)}\n          >\n            ${filter.name}\n          </button>\n        `;\n      })}\n    </div>\n  `;\n});\n","import { html, Component, define } from 'packmar';\nimport Note from './note.js';\nimport Field from './field.js';\nimport Filters from './filters.js';\n\nconst FILTERS = Object.freeze([\n  { name: 'All', check: () => true },\n  { name: 'Active', check: note => !note.checked },\n  { name: 'Completed', check: note => note.checked },\n]);\n\nconst DEFAULT_NOTES = [\n  { id: 1, text: 'Check the packmar.js demo', checked: true },\n  { id: 2, text: 'Create new note', checked: false },\n  { id: 3, text: 'mark any note as done ', checked: false },\n  { id: 4, text: 'Delete any note', checked: false },\n];\n\nexport default define('todo-list', class TodoApp extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      notes: Array.from(props.notes || DEFAULT_NOTES),\n      title: props.title || '',\n      currentText: '',\n      currentFilterName: FILTERS[0].name,\n    };\n    this.addNote = this.addNote.bind(this);\n    this.typeNote = this.typeNote.bind(this);\n    this.checkNote = this.checkNote.bind(this);\n    this.removeNote = this.removeNote.bind(this);\n    this.selectFilter = this.selectFilter.bind(this);\n  }\n\n  typeNote ({ target }) {\n    this.setState({ currentText: target.value });\n  }\n\n  checkNote (noteId) {\n    const targetNote = this.state.notes.find(note => note.id === noteId);\n    targetNote.checked = !targetNote.checked;\n    this.setState({});\n  }\n\n  removeNote (noteId) {\n    this.setState({\n      notes: this.state.notes.filter(note => note.id !== noteId),\n    });\n    if (this.state.notes.length === 0) {\n      this.selectFilter(FILTERS[0].name);\n    }\n  }\n\n  selectFilter (filterName) {\n    this.setState({ currentFilterName: filterName });\n  }\n\n  addNote () {\n    const { notes = [], currentText = '' } = this.state;\n    const hasText = currentText.replace(/\\s*/g, '').length;\n    if (hasText) {\n      const newNote = {\n        id: Date.now(),\n        checked: false,\n        text: currentText.trim(),\n      };\n      this.setState({\n        notes: [newNote, ...notes],\n        currentText: '',\n        currentFilterName: FILTERS[0].name,\n      });\n    }\n  }\n\n  render () {\n    const {\n      addNote,\n      typeNote,\n      checkNote,\n      removeNote,\n      selectFilter,\n    } = this;\n    const {\n      title = '',\n      notes = [],\n      currentText = '',\n      currentFilterName,\n    } = this.state;\n    const defaultCheck = () => true;\n    const currentFilter = FILTERS.find(filter => filter.name === currentFilterName) || {};\n    const needShowNote = currentFilter.check || defaultCheck;\n\n    return html`\n      <div class=\"app-wrapper display--flex width--100percent\">\n        <div class=\"main-content\">\n          <h1 class=\"main-title\">${title}</h1>\n          ${Field({\n            placeholder: 'Just start typing...',\n            value: currentText,\n            onInput: typeNote,\n          })}\n          <button class=\"width--100percent create-note-button\" onclick=${addNote}>To Do</button>\n          ${notes.length > 0 && Filters({\n            filters: FILTERS,\n            selectFilter,\n            currentFilter,\n          })}\n          <div class=\"notes-list\">\n            ${notes.filter(needShowNote).map(note => Note({\n              noteText: note.text,\n              isCompleted: note.checked,\n              onCheck: () => checkNote(note.id),\n              onRemove: () => removeNote(note.id),\n            }))}\n          </div>\n        </div>\n      </div>\n    `;\n  }\n});\n","import { html, render } from 'packmar';\nimport './components/app.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  render(\n    html`<todo-list title='Todo App'></todo-list>`,\n    document.getElementById('main-container'),\n  );\n});\n"]}